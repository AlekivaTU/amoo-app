{"version":3,"file":"static/js/508.9b672f33.chunk.js","mappings":"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","sources":["src/hooks/useTheme.ts","src/components/ProfileScreen.tsx","src/services/datingService.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\nexport const useTheme = () => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return (savedTheme as Theme) || 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  return { theme, toggleTheme };\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { datingService, DatingProfile, EditableProfile } from '../services/datingService';\r\nimport './ProfileScreen.css';\r\nimport { useTheme } from '../hooks/useTheme';\r\n\r\ninterface UserSettings {\r\n  notifications: boolean;\r\n  darkMode: boolean;\r\n  language: string;\r\n  privacy: {\r\n    showOnline: boolean;\r\n    showLastSeen: boolean;\r\n    showDistance: boolean;\r\n  };\r\n}\r\n\r\nconst ProfileScreen: React.FC = () => {\r\n  const [profile, setProfile] = useState<DatingProfile | null>(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [editedProfile, setEditedProfile] = useState<EditableProfile>({});\r\n  const { user } = useAuth();\r\n  const [activeTab, setActiveTab] = useState<'profile' | 'settings' | 'security'>('profile');\r\n  const { theme, toggleTheme } = useTheme();\r\n  const [settings, setSettings] = useState<UserSettings>({\r\n    notifications: true,\r\n    darkMode: theme === 'dark',\r\n    language: 'Русский',\r\n    privacy: {\r\n      showOnline: true,\r\n      showLastSeen: true,\r\n      showDistance: true,\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadProfile();\r\n  }, []);\r\n\r\n  const loadProfile = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const userProfile = await datingService.getProfile();\r\n      setProfile(userProfile);\r\n      setEditedProfile(userProfile);\r\n    } catch (err) {\r\n      setError('Ошибка при загрузке профиля');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEditProfile = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false);\r\n    setEditedProfile(profile || {});\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await datingService.updateProfile(editedProfile);\r\n      const updatedProfile = await datingService.getProfile();\r\n      setProfile(updatedProfile);\r\n      setIsEditing(false);\r\n    } catch (err) {\r\n      setError('Ошибка при сохранении профиля');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setEditedProfile(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleInterestChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const interests = e.target.value.split(',').map(interest => interest.trim());\r\n    setEditedProfile(prev => ({\r\n      ...prev,\r\n      interests\r\n    }));\r\n  };\r\n\r\n  const handlePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files;\r\n    if (files && files.length > 0) {\r\n      const newPhotos = Array.from(files).map(file => URL.createObjectURL(file));\r\n      setEditedProfile(prev => ({\r\n        ...prev,\r\n        photos: [...(prev.photos || []), ...newPhotos]\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleRemovePhoto = (index: number) => {\r\n    setEditedProfile(prev => ({\r\n      ...prev,\r\n      photos: prev.photos?.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    // Здесь будет логика выхода\r\n    console.log('Выход из аккаунта');\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Загрузка...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile-screen\">\r\n      <div className=\"profile-header\">\r\n        <h2>Профиль</h2>\r\n        {!isEditing ? (\r\n          <button onClick={handleEditProfile} className=\"edit-button\">\r\n            Редактировать\r\n          </button>\r\n        ) : (\r\n          <div className=\"edit-actions\">\r\n            <button onClick={handleSaveProfile} className=\"save-button\">\r\n              Сохранить\r\n            </button>\r\n            <button onClick={handleCancelEdit} className=\"cancel-button\">\r\n              Отмена\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"profile-content\">\r\n        <div className=\"profile-photos\">\r\n          <h3>Фотографии</h3>\r\n          <div className=\"photos-grid\">\r\n            {isEditing ? (\r\n              <>\r\n                {editedProfile.photos?.map((photo, index) => (\r\n                  <div key={index} className=\"photo-item\">\r\n                    <img src={photo} alt={`Фото ${index + 1}`} />\r\n                    <button\r\n                      onClick={() => handleRemovePhoto(index)}\r\n                      className=\"remove-photo-button\"\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n                <label className=\"add-photo-button\">\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    multiple\r\n                    onChange={handlePhotoUpload}\r\n                    style={{ display: 'none' }}\r\n                  />\r\n                  <div className=\"add-photo-placeholder\">\r\n                    <span>+</span>\r\n                    <p>Добавить фото</p>\r\n                  </div>\r\n                </label>\r\n              </>\r\n            ) : (\r\n              profile?.photos?.map((photo, index) => (\r\n                <div key={index} className=\"photo-item\">\r\n                  <img src={photo} alt={`Фото ${index + 1}`} />\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profile-info\">\r\n          <div className=\"info-group\">\r\n            <label>Имя</label>\r\n            {isEditing ? (\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={editedProfile.name || ''}\r\n                onChange={handleInputChange}\r\n              />\r\n            ) : (\r\n              <p>{profile?.name}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"info-group\">\r\n            <label>Возраст</label>\r\n            {isEditing ? (\r\n              <input\r\n                type=\"number\"\r\n                name=\"age\"\r\n                value={editedProfile.age || ''}\r\n                onChange={handleInputChange}\r\n              />\r\n            ) : (\r\n              <p>{profile?.age} лет</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"info-group\">\r\n            <label>О себе</label>\r\n            {isEditing ? (\r\n              <textarea\r\n                name=\"bio\"\r\n                value={editedProfile.bio || ''}\r\n                onChange={handleInputChange}\r\n              />\r\n            ) : (\r\n              <p>{profile?.bio}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"info-group\">\r\n            <label>Интересы</label>\r\n            {isEditing ? (\r\n              <input\r\n                type=\"text\"\r\n                name=\"interests\"\r\n                value={editedProfile.interests?.join(', ') || ''}\r\n                onChange={handleInterestChange}\r\n                placeholder=\"Введите интересы через запятую\"\r\n              />\r\n            ) : (\r\n              <div className=\"interests-list\">\r\n                {profile?.interests?.map((interest, index) => (\r\n                  <span key={index} className=\"interest-tag\">\r\n                    {interest}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"info-group\">\r\n            <label>Предпочтения</label>\r\n            {isEditing ? (\r\n              <div className=\"preferences-form\">\r\n                <div className=\"preference-group\">\r\n                  <label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"showLocation\"\r\n                      checked={editedProfile.preferences?.showLocation}\r\n                      onChange={(e) =>\r\n                        setEditedProfile(prev => ({\r\n                          ...prev,\r\n                          preferences: {\r\n                            ...prev.preferences,\r\n                            showLocation: e.target.checked\r\n                          }\r\n                        }))\r\n                      }\r\n                    />\r\n                    Показывать местоположение\r\n                  </label>\r\n                </div>\r\n                <div className=\"preference-group\">\r\n                  <label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"allowMessages\"\r\n                      checked={editedProfile.preferences?.allowMessages}\r\n                      onChange={(e) =>\r\n                        setEditedProfile(prev => ({\r\n                          ...prev,\r\n                          preferences: {\r\n                            ...prev.preferences,\r\n                            allowMessages: e.target.checked\r\n                          }\r\n                        }))\r\n                      }\r\n                    />\r\n                    Разрешить сообщения\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"preferences-list\">\r\n                <p>\r\n                  {profile?.preferences?.showLocation\r\n                    ? 'Местоположение видно'\r\n                    : 'Местоположение скрыто'}\r\n                </p>\r\n                <p>\r\n                  {profile?.preferences?.allowMessages\r\n                    ? 'Сообщения разрешены'\r\n                    : 'Сообщения запрещены'}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"profile-tabs\">\r\n        <button \r\n          className={`tab-button ${activeTab === 'profile' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('profile')}\r\n        >\r\n          Профиль\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'settings' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('settings')}\r\n        >\r\n          Настройки\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'security' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('security')}\r\n        >\r\n          Безопасность\r\n        </button>\r\n      </div>\r\n\r\n      {activeTab === 'settings' && (\r\n        <div className=\"settings-content\">\r\n          <div className=\"settings-section\">\r\n            <h3>Основные настройки</h3>\r\n            <div className=\"setting-item\">\r\n              <span>Уведомления</span>\r\n              <label className=\"switch\">\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={settings.notifications}\r\n                  onChange={() => setSettings({...settings, notifications: !settings.notifications})}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n            <div className=\"setting-item\">\r\n              <span>Темная тема</span>\r\n              <label className=\"switch\">\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={theme === 'dark'}\r\n                  onChange={() => {\r\n                    toggleTheme();\r\n                    setSettings({...settings, darkMode: !settings.darkMode});\r\n                  }}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n            <div className=\"setting-item\">\r\n              <span>Язык</span>\r\n              <select \r\n                value={settings.language}\r\n                onChange={(e) => setSettings({...settings, language: e.target.value})}\r\n              >\r\n                <option value=\"Русский\">Русский</option>\r\n                <option value=\"English\">English</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"settings-section\">\r\n            <h3>Настройки приватности</h3>\r\n            <div className=\"setting-item\">\r\n              <span>Показывать онлайн статус</span>\r\n              <label className=\"switch\">\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={settings.privacy.showOnline}\r\n                  onChange={() => setSettings({\r\n                    ...settings, \r\n                    privacy: {...settings.privacy, showOnline: !settings.privacy.showOnline}\r\n                  })}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n            <div className=\"setting-item\">\r\n              <span>Показывать последнее посещение</span>\r\n              <label className=\"switch\">\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={settings.privacy.showLastSeen}\r\n                  onChange={() => setSettings({\r\n                    ...settings, \r\n                    privacy: {...settings.privacy, showLastSeen: !settings.privacy.showLastSeen}\r\n                  })}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n            <div className=\"setting-item\">\r\n              <span>Показывать расстояние</span>\r\n              <label className=\"switch\">\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={settings.privacy.showDistance}\r\n                  onChange={() => setSettings({\r\n                    ...settings, \r\n                    privacy: {...settings.privacy, showDistance: !settings.privacy.showDistance}\r\n                  })}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'security' && (\r\n        <div className=\"security-content\">\r\n          <div className=\"security-section\">\r\n            <h3>Безопасность аккаунта</h3>\r\n            <button className=\"security-button\">\r\n              Изменить пароль\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\" />\r\n                <path d=\"M7 11V7a5 5 0 0 1 10 0v4\" />\r\n              </svg>\r\n            </button>\r\n            <button className=\"security-button\">\r\n              Двухфакторная аутентификация\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\" />\r\n              </svg>\r\n            </button>\r\n            <button className=\"security-button\">\r\n              История входов\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M12 8v4l3 3\" />\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"security-section\">\r\n            <h3>Управление данными</h3>\r\n            <button className=\"security-button\">\r\n              Скачать мои данные\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n                <polyline points=\"7 10 12 15 17 10\" />\r\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\r\n              </svg>\r\n            </button>\r\n            <button className=\"security-button danger\">\r\n              Удалить аккаунт\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                <path d=\"M3 6h18\" />\r\n                <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\" />\r\n                <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <button className=\"logout-button\" onClick={handleLogout}>\r\n        Выйти из аккаунта\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n          <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n          <polyline points=\"16 17 21 12 16 7\" />\r\n          <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen; ","import api from './api';\r\n\r\nexport interface DatingProfile {\r\n  id: string;\r\n  userId: string;\r\n  name: string;\r\n  age: number;\r\n  bio: string;\r\n  photos: string[];\r\n  interests: string[];\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    city?: string;\r\n  };\r\n  preferences: {\r\n    minAge: number;\r\n    maxAge: number;\r\n    distance: number;\r\n    gender: string;\r\n    showLocation: boolean;\r\n    allowMessages: boolean;\r\n  };\r\n}\r\n\r\nexport interface Match {\r\n  id: string;\r\n  profiles: DatingProfile[];\r\n  timestamp: string;\r\n  status: 'pending' | 'accepted' | 'rejected';\r\n}\r\n\r\nexport interface EditableProfile {\r\n  id?: string;\r\n  userId?: string;\r\n  name?: string;\r\n  age?: number;\r\n  bio?: string;\r\n  photos?: string[];\r\n  interests?: string[];\r\n  location?: {\r\n    latitude?: number;\r\n    longitude?: number;\r\n    city?: string;\r\n  };\r\n  preferences?: {\r\n    minAge?: number;\r\n    maxAge?: number;\r\n    distance?: number;\r\n    gender?: string;\r\n    showLocation?: boolean;\r\n    allowMessages?: boolean;\r\n  };\r\n}\r\n\r\nclass DatingService {\r\n  async getProfile(): Promise<DatingProfile> {\r\n    const response = await api.get('/dating/profile');\r\n    return response.data;\r\n  }\r\n\r\n  async updateProfile(profile: EditableProfile): Promise<DatingProfile> {\r\n    const response = await api.patch('/dating/profile', profile);\r\n    return response.data;\r\n  }\r\n\r\n  async getPotentialMatches(): Promise<DatingProfile[]> {\r\n    const response = await api.get('/dating/potential-matches');\r\n    return response.data;\r\n  }\r\n\r\n  async likeProfile(profileId: string): Promise<void> {\r\n    await api.post(`/dating/like/${profileId}`);\r\n  }\r\n\r\n  async dislikeProfile(profileId: string): Promise<void> {\r\n    await api.post(`/dating/dislike/${profileId}`);\r\n  }\r\n\r\n  async getMatches(): Promise<Match[]> {\r\n    const response = await api.get('/dating/matches');\r\n    return response.data;\r\n  }\r\n\r\n  async acceptMatch(matchId: string): Promise<void> {\r\n    await api.post(`/dating/matches/${matchId}/accept`);\r\n  }\r\n\r\n  async rejectMatch(matchId: string): Promise<void> {\r\n    await api.post(`/dating/matches/${matchId}/reject`);\r\n  }\r\n}\r\n\r\nexport const datingService = new DatingService();\r\nexport default datingService; "],"names":["ProfileScreen","profile","setProfile","useState","isEditing","setIsEditing","loading","setLoading","error","setError","editedProfile","setEditedProfile","user","useAuth","activeTab","setActiveTab","theme","toggleTheme","useTheme","setTheme","localStorage","getItem","useEffect","document","documentElement","setAttribute","setItem","prevTheme","settings","setSettings","notifications","darkMode","language","privacy","showOnline","showLastSeen","showDistance","loadProfile","async","userProfile","datingService","getProfile","err","handleInputChange","e","name","value","target","prev","React","className","onClick","updateProfile","updatedProfile","handleCancelEdit","handleEditProfile","photos","map","photo","index","key","src","alt","filter","_","i","handleRemovePhoto","type","accept","multiple","onChange","files","length","newPhotos","Array","from","file","URL","createObjectURL","style","display","age","bio","interests","join","split","interest","trim","placeholder","checked","preferences","showLocation","allowMessages","width","height","viewBox","fill","stroke","strokeWidth","x","y","rx","ry","d","cx","cy","r","points","x1","y1","x2","y2","handleLogout","console","log","api","get","data","patch","getPotentialMatches","likeProfile","profileId","post","dislikeProfile","getMatches","acceptMatch","matchId","rejectMatch"],"sourceRoot":""}