{"ast":null,"code":"import api from'./api';class StreamService{async getStreams(){const response=await api.get('/streams');return response.data;}async getStream(streamId){const response=await api.get(`/streams/${streamId}`);return response.data;}async startStream(settings){const response=await api.post('/streams',settings);return response.data;}async endStream(streamId){await api.post(`/streams/${streamId}/end`);}async updateStreamSettings(streamId,settings){const response=await api.patch(`/streams/${streamId}`,settings);return response.data;}async getStreamKey(streamId){const response=await api.get(`/streams/${streamId}/key`);return response.data.streamKey;}}export const streamService=new StreamService();","map":{"version":3,"names":["api","StreamService","getStreams","response","get","data","getStream","streamId","startStream","settings","post","endStream","updateStreamSettings","patch","getStreamKey","streamKey","streamService"],"sources":["C:/Users/Maks/Desktop/Amoo App/amoo-app/src/services/streamService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface Stream {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  description: string;\r\n  thumbnailUrl: string;\r\n  isLive: boolean;\r\n  viewerCount: number;\r\n  startedAt?: Date;\r\n  endedAt?: Date;\r\n}\r\n\r\nexport interface StreamSettings {\r\n  title: string;\r\n  description: string;\r\n  isPublic: boolean;\r\n  allowChat: boolean;\r\n}\r\n\r\nclass StreamService {\r\n  async getStreams(): Promise<Stream[]> {\r\n    const response = await api.get('/streams');\r\n    return response.data;\r\n  }\r\n\r\n  async getStream(streamId: string): Promise<Stream> {\r\n    const response = await api.get(`/streams/${streamId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async startStream(settings: StreamSettings): Promise<Stream> {\r\n    const response = await api.post('/streams', settings);\r\n    return response.data;\r\n  }\r\n\r\n  async endStream(streamId: string): Promise<void> {\r\n    await api.post(`/streams/${streamId}/end`);\r\n  }\r\n\r\n  async updateStreamSettings(streamId: string, settings: Partial<StreamSettings>): Promise<Stream> {\r\n    const response = await api.patch(`/streams/${streamId}`, settings);\r\n    return response.data;\r\n  }\r\n\r\n  async getStreamKey(streamId: string): Promise<string> {\r\n    const response = await api.get(`/streams/${streamId}/key`);\r\n    return response.data.streamKey;\r\n  }\r\n}\r\n\r\nexport const streamService = new StreamService(); "],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAqBvB,KAAM,CAAAC,aAAc,CAClB,KAAM,CAAAC,UAAUA,CAAA,CAAsB,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,UAAU,CAAC,CAC1C,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAC,SAASA,CAACC,QAAgB,CAAmB,CACjD,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,YAAYG,QAAQ,EAAE,CAAC,CACtD,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAG,WAAWA,CAACC,QAAwB,CAAmB,CAC3D,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACU,IAAI,CAAC,UAAU,CAAED,QAAQ,CAAC,CACrD,MAAO,CAAAN,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAM,SAASA,CAACJ,QAAgB,CAAiB,CAC/C,KAAM,CAAAP,GAAG,CAACU,IAAI,CAAC,YAAYH,QAAQ,MAAM,CAAC,CAC5C,CAEA,KAAM,CAAAK,oBAAoBA,CAACL,QAAgB,CAAEE,QAAiC,CAAmB,CAC/F,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACa,KAAK,CAAC,YAAYN,QAAQ,EAAE,CAAEE,QAAQ,CAAC,CAClE,MAAO,CAAAN,QAAQ,CAACE,IAAI,CACtB,CAEA,KAAM,CAAAS,YAAYA,CAACP,QAAgB,CAAmB,CACpD,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,YAAYG,QAAQ,MAAM,CAAC,CAC1D,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CAACU,SAAS,CAChC,CACF,CAEA,MAAO,MAAM,CAAAC,aAAa,CAAG,GAAI,CAAAf,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}