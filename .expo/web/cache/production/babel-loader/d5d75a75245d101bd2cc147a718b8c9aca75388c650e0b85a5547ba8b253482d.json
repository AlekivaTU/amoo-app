{"ast":null,"code":"import api from'./api';class LocationService{watchId=null;async getCurrentLocation(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error('Геолокация не поддерживается'));return;}navigator.geolocation.getCurrentPosition(position=>{resolve({latitude:position.coords.latitude,longitude:position.coords.longitude,accuracy:position.coords.accuracy,timestamp:new Date(position.timestamp)});},error=>{reject(error);});});}watchLocation(onLocation,onError){if(!navigator.geolocation){onError?.(new Error('Геолокация не поддерживается'));return;}this.watchId=navigator.geolocation.watchPosition(position=>{onLocation({latitude:position.coords.latitude,longitude:position.coords.longitude,accuracy:position.coords.accuracy,timestamp:new Date(position.timestamp)});},error=>{onError?.(new Error(error.message));},{enableHighAccuracy:true,timeout:5000,maximumAge:0});}stopWatching(){if(this.watchId!==null){navigator.geolocation.clearWatch(this.watchId);this.watchId=null;}}async updateUserLocation(location){await api.post('/users/location',location);}async getNearbyUsers(radius){const response=await api.get(`/users/nearby?radius=${radius}`);return response.data;}}export const locationService=new LocationService();","map":{"version":3,"names":["api","LocationService","watchId","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","latitude","coords","longitude","accuracy","timestamp","Date","error","watchLocation","onLocation","onError","watchPosition","message","enableHighAccuracy","timeout","maximumAge","stopWatching","clearWatch","updateUserLocation","location","post","getNearbyUsers","radius","response","get","data","locationService"],"sources":["C:/Users/Maks/Desktop/Amoo App/amoo-app/src/services/locationService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface Location {\r\n  latitude: number;\r\n  longitude: number;\r\n  accuracy?: number;\r\n  timestamp: Date;\r\n}\r\n\r\nclass LocationService {\r\n  private watchId: number | null = null;\r\n\r\n  async getCurrentLocation(): Promise<Location> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Геолокация не поддерживается'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            accuracy: position.coords.accuracy,\r\n            timestamp: new Date(position.timestamp),\r\n          });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  watchLocation(onLocation: (location: Location) => void, onError?: (error: Error) => void) {\r\n    if (!navigator.geolocation) {\r\n      onError?.(new Error('Геолокация не поддерживается'));\r\n      return;\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        onLocation({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          accuracy: position.coords.accuracy,\r\n          timestamp: new Date(position.timestamp),\r\n        });\r\n      },\r\n      (error) => {\r\n        onError?.(new Error(error.message));\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0,\r\n      }\r\n    );\r\n  }\r\n\r\n  stopWatching() {\r\n    if (this.watchId !== null) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  async updateUserLocation(location: Location): Promise<void> {\r\n    await api.post('/users/location', location);\r\n  }\r\n\r\n  async getNearbyUsers(radius: number): Promise<{ id: string; name: string; location: Location }[]> {\r\n    const response = await api.get(`/users/nearby?radius=${radius}`);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport const locationService = new LocationService(); "],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CASvB,KAAM,CAAAC,eAAgB,CACZC,OAAO,CAAkB,IAAI,CAErC,KAAM,CAAAC,kBAAkBA,CAAA,CAAsB,CAC5C,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CAACC,SAAS,CAACC,WAAW,CAAE,CAC1BF,MAAM,CAAC,GAAI,CAAAG,KAAK,CAAC,8BAA8B,CAAC,CAAC,CACjD,OACF,CAEAF,SAAS,CAACC,WAAW,CAACE,kBAAkB,CACrCC,QAAQ,EAAK,CACZN,OAAO,CAAC,CACNO,QAAQ,CAAED,QAAQ,CAACE,MAAM,CAACD,QAAQ,CAClCE,SAAS,CAAEH,QAAQ,CAACE,MAAM,CAACC,SAAS,CACpCC,QAAQ,CAAEJ,QAAQ,CAACE,MAAM,CAACE,QAAQ,CAClCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACN,QAAQ,CAACK,SAAS,CACxC,CAAC,CAAC,CACJ,CAAC,CACAE,KAAK,EAAK,CACTZ,MAAM,CAACY,KAAK,CAAC,CACf,CACF,CAAC,CACH,CAAC,CAAC,CACJ,CAEAC,aAAaA,CAACC,UAAwC,CAAEC,OAAgC,CAAE,CACxF,GAAI,CAACd,SAAS,CAACC,WAAW,CAAE,CAC1Ba,OAAO,GAAG,GAAI,CAAAZ,KAAK,CAAC,8BAA8B,CAAC,CAAC,CACpD,OACF,CAEA,IAAI,CAACP,OAAO,CAAGK,SAAS,CAACC,WAAW,CAACc,aAAa,CAC/CX,QAAQ,EAAK,CACZS,UAAU,CAAC,CACTR,QAAQ,CAAED,QAAQ,CAACE,MAAM,CAACD,QAAQ,CAClCE,SAAS,CAAEH,QAAQ,CAACE,MAAM,CAACC,SAAS,CACpCC,QAAQ,CAAEJ,QAAQ,CAACE,MAAM,CAACE,QAAQ,CAClCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACN,QAAQ,CAACK,SAAS,CACxC,CAAC,CAAC,CACJ,CAAC,CACAE,KAAK,EAAK,CACTG,OAAO,GAAG,GAAI,CAAAZ,KAAK,CAACS,KAAK,CAACK,OAAO,CAAC,CAAC,CACrC,CAAC,CACD,CACEC,kBAAkB,CAAE,IAAI,CACxBC,OAAO,CAAE,IAAI,CACbC,UAAU,CAAE,CACd,CACF,CAAC,CACH,CAEAC,YAAYA,CAAA,CAAG,CACb,GAAI,IAAI,CAACzB,OAAO,GAAK,IAAI,CAAE,CACzBK,SAAS,CAACC,WAAW,CAACoB,UAAU,CAAC,IAAI,CAAC1B,OAAO,CAAC,CAC9C,IAAI,CAACA,OAAO,CAAG,IAAI,CACrB,CACF,CAEA,KAAM,CAAA2B,kBAAkBA,CAACC,QAAkB,CAAiB,CAC1D,KAAM,CAAA9B,GAAG,CAAC+B,IAAI,CAAC,iBAAiB,CAAED,QAAQ,CAAC,CAC7C,CAEA,KAAM,CAAAE,cAAcA,CAACC,MAAc,CAA+D,CAChG,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAlC,GAAG,CAACmC,GAAG,CAAC,wBAAwBF,MAAM,EAAE,CAAC,CAChE,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CACF,CAEA,MAAO,MAAM,CAAAC,eAAe,CAAG,GAAI,CAAApC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}