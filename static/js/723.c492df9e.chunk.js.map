{"version":3,"file":"static/js/723.c492df9e.chunk.js","mappings":"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","sources":["src/services/locationService.ts","src/components/LocationScreen.tsx"],"sourcesContent":["import api from './api';\r\n\r\nexport interface Location {\r\n  latitude: number;\r\n  longitude: number;\r\n  accuracy?: number;\r\n  timestamp: Date;\r\n}\r\n\r\nclass LocationService {\r\n  private watchId: number | null = null;\r\n\r\n  async getCurrentLocation(): Promise<Location> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Геолокация не поддерживается'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            accuracy: position.coords.accuracy,\r\n            timestamp: new Date(position.timestamp),\r\n          });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  watchLocation(onLocation: (location: Location) => void, onError?: (error: Error) => void) {\r\n    if (!navigator.geolocation) {\r\n      onError?.(new Error('Геолокация не поддерживается'));\r\n      return;\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        onLocation({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          accuracy: position.coords.accuracy,\r\n          timestamp: new Date(position.timestamp),\r\n        });\r\n      },\r\n      (error) => {\r\n        onError?.(new Error(error.message));\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0,\r\n      }\r\n    );\r\n  }\r\n\r\n  stopWatching() {\r\n    if (this.watchId !== null) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  async updateUserLocation(location: Location): Promise<void> {\r\n    await api.post('/users/location', location);\r\n  }\r\n\r\n  async getNearbyUsers(radius: number): Promise<{ id: string; name: string; location: Location }[]> {\r\n    const response = await api.get(`/users/nearby?radius=${radius}`);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport const locationService = new LocationService(); ","import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { locationService, Location } from '../services/locationService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport './LocationScreen.css';\r\n\r\ninterface NearbyUser {\r\n  id: string;\r\n  name: string;\r\n  location: Location;\r\n  distance: number;\r\n}\r\n\r\nconst LocationScreen: React.FC = () => {\r\n  const [currentLocation, setCurrentLocation] = useState<Location | null>(null);\r\n  const [nearbyUsers, setNearbyUsers] = useState<NearbyUser[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [isWatching, setIsWatching] = useState(false);\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    loadCurrentLocation();\r\n    return () => {\r\n      if (isWatching) {\r\n        locationService.stopWatching();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const loadCurrentLocation = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const location = await locationService.getCurrentLocation();\r\n      setCurrentLocation(location);\r\n      await loadNearbyUsers();\r\n    } catch (err) {\r\n      setError('Ошибка при получении местоположения');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadNearbyUsers = async () => {\r\n    if (!currentLocation) return;\r\n\r\n    try {\r\n      const users = await locationService.getNearbyUsers(5); // радиус 5 км\r\n      const formattedUsers: NearbyUser[] = users.map(user => ({\r\n        id: user.id,\r\n        name: user.name || 'Пользователь',\r\n        location: user.location,\r\n        distance: calculateDistance(\r\n          currentLocation.latitude,\r\n          currentLocation.longitude,\r\n          user.location.latitude,\r\n          user.location.longitude\r\n        )\r\n      }));\r\n      setNearbyUsers(formattedUsers);\r\n    } catch (err) {\r\n      setError('Ошибка при загрузке ближайших пользователей');\r\n    }\r\n  };\r\n\r\n  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\r\n    const R = 6371; // радиус Земли в километрах\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  };\r\n\r\n  const toRad = (value: number): number => {\r\n    return (value * Math.PI) / 180;\r\n  };\r\n\r\n  const toggleLocationWatching = () => {\r\n    if (isWatching) {\r\n      locationService.stopWatching();\r\n      setIsWatching(false);\r\n    } else {\r\n      locationService.watchLocation(\r\n        (location) => {\r\n          setCurrentLocation(location);\r\n          loadNearbyUsers();\r\n        },\r\n        (err) => {\r\n          setError('Ошибка при отслеживании местоположения');\r\n        }\r\n      );\r\n      setIsWatching(true);\r\n    }\r\n  };\r\n\r\n  const updateLocation = async () => {\r\n    if (!currentLocation) return;\r\n\r\n    try {\r\n      await locationService.updateUserLocation(currentLocation);\r\n    } catch (err) {\r\n      setError('Ошибка при обновлении местоположения');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Загрузка...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  if (!currentLocation) {\r\n    return (\r\n      <div className=\"location-screen\">\r\n        <div className=\"location-error\">\r\n          <h2>Не удалось получить местоположение</h2>\r\n          <p>Пожалуйста, разрешите доступ к геолокации в настройках браузера</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"location-screen\">\r\n      <div className=\"location-controls\">\r\n        <button\r\n          onClick={toggleLocationWatching}\r\n          className={`watch-button ${isWatching ? 'active' : ''}`}\r\n        >\r\n          {isWatching ? 'Остановить отслеживание' : 'Начать отслеживание'}\r\n        </button>\r\n        <button onClick={updateLocation} className=\"update-button\">\r\n          Обновить местоположение\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"map-container\">\r\n        <MapContainer\r\n          center={[currentLocation.latitude, currentLocation.longitude]}\r\n          zoom={13}\r\n          style={{ height: '500px', width: '100%' }}\r\n        >\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          <Marker position={[currentLocation.latitude, currentLocation.longitude]}>\r\n            <Popup>\r\n              <div className=\"marker-popup\">\r\n                <h3>Вы</h3>\r\n                <p>Ваше текущее местоположение</p>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n          {nearbyUsers.map((user) => (\r\n            <Marker\r\n              key={user.id}\r\n              position={[user.location.latitude, user.location.longitude]}\r\n            >\r\n              <Popup>\r\n                <div className=\"marker-popup\">\r\n                  <h3>{user.name}</h3>\r\n                  <p>Расстояние: {user.distance.toFixed(2)} км</p>\r\n                </div>\r\n              </Popup>\r\n            </Marker>\r\n          ))}\r\n        </MapContainer>\r\n      </div>\r\n\r\n      <div className=\"nearby-users\">\r\n        <h2>Ближайшие пользователи</h2>\r\n        <div className=\"users-list\">\r\n          {nearbyUsers.map((user) => (\r\n            <div key={user.id} className=\"user-card\">\r\n              <h3>{user.name}</h3>\r\n              <p>Расстояние: {user.distance.toFixed(2)} км</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationScreen; "],"names":["locationService","watchId","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","accuracy","timestamp","Date","error","Error","watchLocation","onLocation","onError","this","watchPosition","message","enableHighAccuracy","timeout","maximumAge","stopWatching","clearWatch","updateUserLocation","location","api","post","getNearbyUsers","radius","get","data","LocationScreen","currentLocation","setCurrentLocation","useState","nearbyUsers","setNearbyUsers","loading","setLoading","setError","isWatching","setIsWatching","user","useAuth","useEffect","loadCurrentLocation","async","loadNearbyUsers","err","formattedUsers","map","id","name","distance","calculateDistance","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","value","PI","React","className","onClick","toggleLocationWatching","MapContainer","center","zoom","style","height","width","TileLayer","url","attribution","Marker","Popup","key","toFixed"],"sourceRoot":""}