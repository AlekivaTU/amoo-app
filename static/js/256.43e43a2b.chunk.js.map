{"version":3,"file":"static/js/256.43e43a2b.chunk.js","mappings":"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","sources":["src/components/ProfilePhotos.tsx","src/components/ProfileInfo.tsx","src/components/MatchesList.tsx","src/components/DatingScreen.tsx","src/services/datingService.ts"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface ProfilePhotosProps {\r\n  photos: string[];\r\n}\r\n\r\nconst ProfilePhotos: React.FC<ProfilePhotosProps> = ({ photos }) => {\r\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\r\n\r\n  const nextPhoto = () => {\r\n    setCurrentPhotoIndex((prev) => (prev + 1) % photos.length);\r\n  };\r\n\r\n  const prevPhoto = () => {\r\n    setCurrentPhotoIndex((prev) => (prev - 1 + photos.length) % photos.length);\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-photos\">\r\n      {photos.map((photo, index) => (\r\n        <img\r\n          key={photo}\r\n          src={photo}\r\n          alt={`Фото ${index + 1}`}\r\n          className={index === currentPhotoIndex ? 'active' : ''}\r\n        />\r\n      ))}\r\n      <div className=\"photo-navigation\">\r\n        <button\r\n          className=\"photo-nav-button prev\"\r\n          onClick={prevPhoto}\r\n          disabled={photos.length <= 1}\r\n        >\r\n          ←\r\n        </button>\r\n        <div className=\"photo-indicators\">\r\n          {photos.map((_, index) => (\r\n            <div\r\n              key={index}\r\n              className={`photo-indicator ${\r\n                index === currentPhotoIndex ? 'active' : ''\r\n              }`}\r\n              onClick={() => setCurrentPhotoIndex(index)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button\r\n          className=\"photo-nav-button next\"\r\n          onClick={nextPhoto}\r\n          disabled={photos.length <= 1}\r\n        >\r\n          →\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePhotos; ","import React from 'react';\r\nimport { DatingProfile } from '../services/datingService';\r\n\r\ninterface ProfileInfoProps {\r\n  profile: DatingProfile;\r\n  onLike: () => void;\r\n  onDislike: () => void;\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoProps> = ({ profile, onLike, onDislike }) => {\r\n  return (\r\n    <div className=\"profile-info\">\r\n      <h2>\r\n        {profile.name}, {profile.age}\r\n      </h2>\r\n      {profile.location.city && (\r\n        <p className=\"location\">{profile.location.city}</p>\r\n      )}\r\n      <p className=\"bio\">{profile.bio}</p>\r\n      {profile.interests.length > 0 && (\r\n        <div className=\"interests\">\r\n          {profile.interests.map((interest) => (\r\n            <span key={interest} className=\"interest-tag\">\r\n              {interest}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <div className=\"profile-actions\">\r\n        <button className=\"dislike-button\" onClick={onDislike}>\r\n          ✕\r\n        </button>\r\n        <button className=\"like-button\" onClick={onLike}>\r\n          ♥\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo; ","import React from 'react';\r\nimport { Match } from '../services/datingService';\r\n\r\ninterface MatchesListProps {\r\n  matches: Match[];\r\n  onMatchClick: (matchId: string) => void;\r\n}\r\n\r\nconst MatchesList: React.FC<MatchesListProps> = ({ matches, onMatchClick }) => {\r\n  if (matches.length === 0) {\r\n    return (\r\n      <div className=\"no-matches\">\r\n        <h2>Нет совпадений</h2>\r\n        <p>Продолжайте искать, чтобы найти свою пару!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"matches-section\">\r\n      <h3>Ваши совпадения</h3>\r\n      <div className=\"matches-grid\">\r\n        {matches.map((match) => (\r\n          <div\r\n            key={match.id}\r\n            className=\"match-item\"\r\n            onClick={() => onMatchClick(match.id)}\r\n          >\r\n            <div className=\"match-avatar\">\r\n              <img\r\n                src={match.profiles[0].photos[0]}\r\n                alt={match.profiles[0].name}\r\n              />\r\n            </div>\r\n            <div className=\"match-info\">\r\n              <h4>{match.profiles[0].name}</h4>\r\n              <p>{match.profiles[0].age} лет</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MatchesList; ","import React, { useEffect, useState } from 'react';\r\nimport { DatingProfile, Match } from '../services/datingService';\r\nimport datingService from '../services/datingService';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileInfo from './ProfileInfo';\r\nimport MatchesList from './MatchesList';\r\nimport './DatingScreen.css';\r\n\r\nconst DatingScreen: React.FC = () => {\r\n  const [currentProfile, setCurrentProfile] = useState<DatingProfile | null>(null);\r\n  const [matches, setMatches] = useState<Match[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const [profileResponse, matchesResponse] = await Promise.all([\r\n        datingService.getPotentialMatches(),\r\n        datingService.getMatches()\r\n      ]);\r\n      \r\n      if (profileResponse.length > 0) {\r\n        setCurrentProfile(profileResponse[0]);\r\n      }\r\n      setMatches(matchesResponse);\r\n    } catch (err) {\r\n      setError('Произошла ошибка при загрузке данных');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLike = async () => {\r\n    if (!currentProfile) return;\r\n    \r\n    try {\r\n      await datingService.likeProfile(currentProfile.id);\r\n      loadData(); // Перезагружаем данные после лайка\r\n    } catch (err) {\r\n      setError('Не удалось поставить лайк');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleDislike = async () => {\r\n    if (!currentProfile) return;\r\n    \r\n    try {\r\n      await datingService.dislikeProfile(currentProfile.id);\r\n      loadData(); // Перезагружаем данные после дизлайка\r\n    } catch (err) {\r\n      setError('Не удалось поставить дизлайк');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleMatchClick = async (matchId: string) => {\r\n    try {\r\n      await datingService.acceptMatch(matchId);\r\n      loadData(); // Перезагружаем данные после принятия совпадения\r\n    } catch (err) {\r\n      setError('Не удалось принять совпадение');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Загрузка...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  if (!currentProfile) {\r\n    return (\r\n      <div className=\"no-matches\">\r\n        <h2>Нет доступных профилей</h2>\r\n        <p>Попробуйте изменить настройки поиска или вернитесь позже</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"dating-screen\">\r\n      <div className=\"profile-card\">\r\n        <ProfilePhotos photos={currentProfile.photos} />\r\n        <ProfileInfo\r\n          profile={currentProfile}\r\n          onLike={handleLike}\r\n          onDislike={handleDislike}\r\n        />\r\n      </div>\r\n      <MatchesList matches={matches} onMatchClick={handleMatchClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatingScreen; ","import api from './api';\r\n\r\nexport interface DatingProfile {\r\n  id: string;\r\n  userId: string;\r\n  name: string;\r\n  age: number;\r\n  bio: string;\r\n  photos: string[];\r\n  interests: string[];\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    city?: string;\r\n  };\r\n  preferences: {\r\n    minAge: number;\r\n    maxAge: number;\r\n    distance: number;\r\n    gender: string;\r\n    showLocation: boolean;\r\n    allowMessages: boolean;\r\n  };\r\n}\r\n\r\nexport interface Match {\r\n  id: string;\r\n  profiles: DatingProfile[];\r\n  timestamp: string;\r\n  status: 'pending' | 'accepted' | 'rejected';\r\n}\r\n\r\nexport interface EditableProfile {\r\n  id?: string;\r\n  userId?: string;\r\n  name?: string;\r\n  age?: number;\r\n  bio?: string;\r\n  photos?: string[];\r\n  interests?: string[];\r\n  location?: {\r\n    latitude?: number;\r\n    longitude?: number;\r\n    city?: string;\r\n  };\r\n  preferences?: {\r\n    minAge?: number;\r\n    maxAge?: number;\r\n    distance?: number;\r\n    gender?: string;\r\n    showLocation?: boolean;\r\n    allowMessages?: boolean;\r\n  };\r\n}\r\n\r\nclass DatingService {\r\n  async getProfile(): Promise<DatingProfile> {\r\n    const response = await api.get('/dating/profile');\r\n    return response.data;\r\n  }\r\n\r\n  async updateProfile(profile: EditableProfile): Promise<DatingProfile> {\r\n    const response = await api.patch('/dating/profile', profile);\r\n    return response.data;\r\n  }\r\n\r\n  async getPotentialMatches(): Promise<DatingProfile[]> {\r\n    const response = await api.get('/dating/potential-matches');\r\n    return response.data;\r\n  }\r\n\r\n  async likeProfile(profileId: string): Promise<void> {\r\n    await api.post(`/dating/like/${profileId}`);\r\n  }\r\n\r\n  async dislikeProfile(profileId: string): Promise<void> {\r\n    await api.post(`/dating/dislike/${profileId}`);\r\n  }\r\n\r\n  async getMatches(): Promise<Match[]> {\r\n    const response = await api.get('/dating/matches');\r\n    return response.data;\r\n  }\r\n\r\n  async acceptMatch(matchId: string): Promise<void> {\r\n    await api.post(`/dating/matches/${matchId}/accept`);\r\n  }\r\n\r\n  async rejectMatch(matchId: string): Promise<void> {\r\n    await api.post(`/dating/matches/${matchId}/reject`);\r\n  }\r\n}\r\n\r\nexport const datingService = new DatingService();\r\nexport default datingService; "],"names":["ProfilePhotos","photos","currentPhotoIndex","setCurrentPhotoIndex","useState","React","className","map","photo","index","key","src","alt","onClick","prevPhoto","prev","length","disabled","_","nextPhoto","ProfileInfo","profile","onLike","onDislike","name","age","location","city","bio","interests","interest","MatchesList","matches","onMatchClick","match","id","profiles","DatingScreen","currentProfile","setCurrentProfile","setMatches","loading","setLoading","error","setError","useEffect","loadData","async","profileResponse","matchesResponse","Promise","all","datingService","getPotentialMatches","getMatches","err","console","likeProfile","dislikeProfile","acceptMatch","matchId","getProfile","api","get","data","updateProfile","patch","profileId","post","rejectMatch"],"sourceRoot":""}