{"version":3,"file":"static/js/653.4457dde7.chunk.js","mappings":"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","sources":["src/services/streamService.ts","src/components/StreamsScreen.tsx"],"sourcesContent":["import api from './api';\r\n\r\nexport interface Stream {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  description: string;\r\n  thumbnailUrl: string;\r\n  isLive: boolean;\r\n  viewerCount: number;\r\n  startedAt?: Date;\r\n  endedAt?: Date;\r\n}\r\n\r\nexport interface StreamSettings {\r\n  title: string;\r\n  description: string;\r\n  isPublic: boolean;\r\n  allowChat: boolean;\r\n}\r\n\r\nclass StreamService {\r\n  async getStreams(): Promise<Stream[]> {\r\n    const response = await api.get('/streams');\r\n    return response.data;\r\n  }\r\n\r\n  async getStream(streamId: string): Promise<Stream> {\r\n    const response = await api.get(`/streams/${streamId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async startStream(settings: StreamSettings): Promise<Stream> {\r\n    const response = await api.post('/streams', settings);\r\n    return response.data;\r\n  }\r\n\r\n  async endStream(streamId: string): Promise<void> {\r\n    await api.post(`/streams/${streamId}/end`);\r\n  }\r\n\r\n  async updateStreamSettings(streamId: string, settings: Partial<StreamSettings>): Promise<Stream> {\r\n    const response = await api.patch(`/streams/${streamId}`, settings);\r\n    return response.data;\r\n  }\r\n\r\n  async getStreamKey(streamId: string): Promise<string> {\r\n    const response = await api.get(`/streams/${streamId}/key`);\r\n    return response.data.streamKey;\r\n  }\r\n}\r\n\r\nexport const streamService = new StreamService(); ","import React, { useState, useEffect } from 'react';\r\nimport { streamService, Stream, StreamSettings } from '../services/streamService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport './StreamsScreen.css';\r\n\r\nconst StreamsScreen: React.FC = () => {\r\n  const [streams, setStreams] = useState<Stream[]>([]);\r\n  const [currentStream, setCurrentStream] = useState<Stream | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [isStartingStream, setIsStartingStream] = useState(false);\r\n  const [streamSettings, setStreamSettings] = useState<StreamSettings>({\r\n    title: '',\r\n    description: '',\r\n    isPublic: true,\r\n    allowChat: true,\r\n  });\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    loadStreams();\r\n  }, []);\r\n\r\n  const loadStreams = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const streamsData = await streamService.getStreams();\r\n      setStreams(streamsData);\r\n    } catch (err) {\r\n      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∏–º–æ–≤');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleStartStream = async () => {\r\n    try {\r\n      setIsStartingStream(true);\r\n      const stream = await streamService.startStream(streamSettings);\r\n      setCurrentStream(stream);\r\n      loadStreams();\r\n    } catch (err) {\r\n      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∞');\r\n    } finally {\r\n      setIsStartingStream(false);\r\n    }\r\n  };\r\n\r\n  const handleEndStream = async () => {\r\n    if (!currentStream) return;\r\n\r\n    try {\r\n      await streamService.endStream(currentStream.id);\r\n      setCurrentStream(null);\r\n      loadStreams();\r\n    } catch (err) {\r\n      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞');\r\n    }\r\n  };\r\n\r\n  const handleWatchStream = async (streamId: string) => {\r\n    try {\r\n      const stream = await streamService.getStream(streamId);\r\n      setCurrentStream(stream);\r\n    } catch (err) {\r\n      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∏–º–∞');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"streams-screen\">\r\n      {currentStream ? (\r\n        <div className=\"current-stream\">\r\n          <div className=\"stream-header\">\r\n            <h2>{currentStream.title}</h2>\r\n            {currentStream.userId === user?.id && (\r\n              <button onClick={handleEndStream} className=\"end-stream-button\">\r\n                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ç—Ä–∏–º\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div className=\"stream-player\">\r\n            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–ª–µ–µ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∞ */}\r\n            <div className=\"stream-placeholder\">\r\n              –°—Ç—Ä–∏–º {currentStream.title}\r\n            </div>\r\n          </div>\r\n          <div className=\"stream-info\">\r\n            <p>{currentStream.description}</p>\r\n            <div className=\"stream-stats\">\r\n              <span>üë• {currentStream.viewerCount}</span>\r\n              <span>üïí {new Date(currentStream.startedAt!).toLocaleTimeString()}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"streams-header\">\r\n            <h2>–°—Ç—Ä–∏–º—ã</h2>\r\n            {!isStartingStream && (\r\n              <button onClick={() => setIsStartingStream(true)} className=\"start-stream-button\">\r\n                –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {isStartingStream ? (\r\n            <div className=\"stream-settings\">\r\n              <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∏–º–∞</h3>\r\n              <div className=\"form-group\">\r\n                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={streamSettings.title}\r\n                  onChange={(e) =>\r\n                    setStreamSettings({ ...streamSettings, title: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>\r\n                <textarea\r\n                  value={streamSettings.description}\r\n                  onChange={(e) =>\r\n                    setStreamSettings({ ...streamSettings, description: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={streamSettings.isPublic}\r\n                    onChange={(e) =>\r\n                      setStreamSettings({ ...streamSettings, isPublic: e.target.checked })\r\n                    }\r\n                  />\r\n                  –ü—É–±–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º\r\n                </label>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={streamSettings.allowChat}\r\n                    onChange={(e) =>\r\n                      setStreamSettings({ ...streamSettings, allowChat: e.target.checked })\r\n                    }\r\n                  />\r\n                  –†–∞–∑—Ä–µ—à–∏—Ç—å —á–∞—Ç\r\n                </label>\r\n              </div>\r\n              <div className=\"stream-actions\">\r\n                <button onClick={handleStartStream} className=\"start-button\">\r\n                  –ù–∞—á–∞—Ç—å\r\n                </button>\r\n                <button onClick={() => setIsStartingStream(false)} className=\"cancel-button\">\r\n                  –û—Ç–º–µ–Ω–∞\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"streams-grid\">\r\n              {streams.map((stream) => (\r\n                <div key={stream.id} className=\"stream-card\">\r\n                  <img src={stream.thumbnailUrl} alt={stream.title} className=\"stream-thumbnail\" />\r\n                  <div className=\"stream-card-info\">\r\n                    <h3>{stream.title}</h3>\r\n                    <p>{stream.description}</p>\r\n                    <div className=\"stream-card-stats\">\r\n                      <span>üë• {stream.viewerCount}</span>\r\n                      <span>üïí {new Date(stream.startedAt!).toLocaleTimeString()}</span>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => handleWatchStream(stream.id)}\r\n                      className=\"watch-stream-button\"\r\n                    >\r\n                      –°–º–æ—Ç—Ä–µ—Ç—å\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamsScreen; "],"names":["streamService","getStreams","api","get","data","getStream","streamId","startStream","settings","post","endStream","updateStreamSettings","patch","getStreamKey","streamKey","StreamsScreen","streams","setStreams","useState","currentStream","setCurrentStream","loading","setLoading","error","setError","isStartingStream","setIsStartingStream","streamSettings","setStreamSettings","title","description","isPublic","allowChat","user","useAuth","useEffect","loadStreams","async","streamsData","err","React","className","userId","id","onClick","viewerCount","Date","startedAt","toLocaleTimeString","type","value","onChange","e","target","checked","stream","map","key","src","thumbnailUrl","alt","handleWatchStream"],"sourceRoot":""}